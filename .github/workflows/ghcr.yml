name: GHCR jlgallego99/ostfind

# El evento que activa este workflow en este caso es el de "push"
# Cada vez que se actualice la rama principal (main) del repositorio, se construirá y subirá el contenedor
on:
  push:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Todas las acciones que va a ejecutar este workflow se listan aquí
jobs:
  docker:
    # Especificar el ambiente donde ejecutar el workflow, en este caso linux es lo más adecuado y rápido
    runs-on: ubuntu-latest
    # Permisos de lectura de contenido del repo y write para poder crear el paquete con el contenedor
    permissions:
      contents: read
      packages: write

    steps:
      # Comprobar el estado del repositorio para que el propio workflow pueda acceder a él
      - name: Checkout
        uses: actions/checkout@v2

      # Hacer login en GHCR
      - name: Login to Github Container Registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          # El registro donde se va a hacer login para luego subir el contenedor (ghcr)
          registry: ghcr.io
          username: ${{ github.actor }} # Variable de entorno que simplemente extrae el nombre de usuario del que lo llama (jlgallego99)
          password: ${{ secrets.GITHUB_TOKEN }} # Acceder de forma normal a la contraseña en los secretos del repo (esta la genera las github actions automaticamente)

      # Extraer los tags de la imagen docker para usarlo luego al construirla
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} # Nombre de la imagen docker a compilar

      # Construye el contenedor y lo sube a GHCR
      - name: Build and push
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          # Indica que se sube la imagen al registro si ha compilado
          push: true
          # Coger los metadatos extraídos y crear el contenedor con ese tag
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}